submit()
q()
?Rprofile
?lm
?mtcars
str(mtcars)
data("mtcars", package = "datasets")
is.data.frame(mtcars) #check if data frame object
names(mtcars)
summary(mtcars)
head(mtcars)
cor(mtcars[,c("mpg","hp","wt")])
?plot
pairs(mtcars[,c("mpg","hp","wt")], main = "mtcars data")
pairs(mtcars[, c("mpg", "hp", "wt")], panel = function(x, y){
abline(lm(y ~ x))
lines(lowess(x, y), lty = 2, col = 2)
points(x, y, pch = 20)
legend(x = "topright", legend = paste("Cor = ", round(cor(x, y), 2)), bty = "n")
})
#Design matrix
wt <- mtcars$wt
X <- cbind(1, wt)
mpg <- mtcars$mpg
#OLS estimates
XtXinv <- solve(crossprod(X))
beta_hat <- c(XtXinv %*% t(X) %*% mpg)
#Form orthogonal projection matrix
Hmat <- X %*% XtXinv %*% t(X)
#Create residuals and fitted values
fitted <- Hmat %*% mpg
res <- mpg - fitted
fitted <- Hmat %*% mpg
#Variance estimate and standard errors
s2 <- sum(res^2) / (length(res) - ncol(X))
std_err <- sqrt(diag(s2 * XtXinv))
plot(mpg ~ wt, xlab = "weight (1000 lbs)", ylab = "miles/US gallon",
main = "Fuel consumption of automobiles, 1974 Motor Trend", data = mtcars,
bty = "l", pch = 20, ylim = c(0, 35), xlim = c(0, 6))
#Line of best linear fit
abline(a = beta_hat[1], b = beta_hat[2], col = "blue", lwd = 2)
#Residuals are vertical distance from line to
for(i in 1:nrow(X)){
segments(x0 = wt[i], y0 = fitted[i], y1 = fitted[i] + res[i], col = 2)
}
baba <- function(x){x}
baba(x)
baba(1)
setwd("C:/Users/Ivan/Desktop/Data-Analysis-Project")
View(baba)
q()
##install packages ggplot2,car,GGally, knitr
library(ggplot2)
library(car)
library(knitr)
library(GGally)
prostate <- read.table("http://sma.epfl.ch/~lbelzile/math341/prostate.dat", header = TRUE)
attach(prostate)
##Exploratory data analysis
str(prostate)
apply(prostate, 2, range)
print(GGally::ggpairs(prostate[,-c(5,7)]), progress = FALSE)
##lpsa has linear relationship with lcavol, (less)lweight, lcp, rests seems uncorrelated
##collinearity between lcavol-lcp
##no need for transformations
##default value observed before taking log need to clean
gleason <- factor(gleason, ordered=FALSE)
svi <- factor(svi, ordered=FALSE)
##Fit full model
full_model <- lm(lpsa ~ lcavol + lweight + age + lbph + svi + lcp + gleason + pgg45)
summary_fm <- summary(full_model)
knitr::kable(coef(summary_fm), digits = 3)
##have intercept table, interpret t values
##strong evidence against the hypothesis that lcavol, lweight, svi souldn't be included
##pgg45 close to 0
##perform backward selection
drop1(lm(lpsa ~ lcavol + lweight + age + lbph + svi + lcp + gleason + pgg45), test = "F")
drop1(lm(lpsa ~ lcavol + lweight + age + lbph + svi + lcp + pgg45), test = "F")
drop1(lm(lpsa ~ lcavol + lweight + age + lbph + svi + pgg45), test = "F")
drop1(lm(lpsa ~ lcavol + lweight + age + lbph + svi), test = "F")
drop1(lm(lpsa ~ lcavol + lweight + lbph + svi), test = "F")
drop1(lm(lpsa ~ lcavol + lweight + svi), test = "F")
##forward selection:
##end up with same model
##add_interactions
backward_selection_model<- lm(lpsa ~ lcavol + lweight + svi)
interaction1_model<- lm(lpsa ~ lcavol + lweight + svi + lcavol:svi + lweight:svi)
interaction2_model<- lm(lpsa ~ lcavol + lweight + svi + lcavol:svi)
interaction3_model<- lm(lpsa ~ lcavol + lweight + svi + lweight:svi)
##perform model selection on models built
##CV
AIC(full_model)
AIC(backward_selection_model)
AIC(interaction1_model)
AIC(interaction2_model)
AIC(interaction3_model)
BIC(full_model)
BIC(backward_selection_model)
BIC(interaction1_model)
BIC(interaction2_model)
BIC(interaction3_model)
summary(full_model)$adj.r.squared
summary(backward_selection_model)$adj.r.squared
summary(interaction1_model)$adj.r.squared
summary(interaction2_model)$adj.r.squared
summary(interaction3_model)$adj.r.squared
##cross validation
##select backward_selection_model
##diagnostics on final model
##do plot residuals against each covariates
par(mfrow = c(2, 2), mar = c(5, 5, 1.5, 0.5))
bl <- scales::alpha("black", 0.5) #semi-transparent black
n <- nrow(prostate)
#Student Q-Q plot
qqPlot(backward_selection_model, simulate = 1999, envelope = TRUE,
ylab = "Externally studentized residuals",
xlab = "Theoretical student quantiles",
pch = 20, col = bl)
#Residuals vs fitted values
residualPlot(backward_selection_model, type = "rstudent", quadratic = FALSE,
pch = 20, ylab = "Externally studentized residuals")
#Cook distance hat values
plot(cooks.distance(backward_selection_model), col = bl, pch = 20, ylab = "Cook's distances")
abline(h = 8/(n-2*length(coef(backward_selection_model))), col = 2)
influencePlot(backward_selection_model)
##colinearity
vif(backward_selection_model)
M <- model.matrix(backward_selection_model)
kappa(M, exact = TRUE, norm='2')
##install packages ggplot2,car,GGally, knitr
library(ggplot2)
library(car)
library(knitr)
library(GGally)
prostate <- read.table("http://sma.epfl.ch/~lbelzile/math341/prostate.dat", header = TRUE)
attach(prostate)
##Exploratory data analysis
str(prostate)
apply(prostate, 2, range)
print(GGally::ggpairs(prostate[,-c(5,7)]), progress = FALSE)
##lpsa has linear relationship with lcavol, (less)lweight, lcp, rests seems uncorrelated
##collinearity between lcavol-lcp
##no need for transformations
##default value observed before taking log need to clean
gleason <- factor(gleason, ordered=FALSE)
svi <- factor(svi, ordered=FALSE)
##Fit full model
full_model <- lm(lpsa ~ lcavol + lweight + age + lbph + svi + lcp + gleason + pgg45)
summary_fm <- summary(full_model)
knitr::kable(coef(summary_fm), digits = 3)
##have intercept table, interpret t values
##strong evidence against the hypothesis that lcavol, lweight, svi souldn't be included
##pgg45 close to 0
##perform backward selection
drop1(lm(lpsa ~ lcavol + lweight + age + lbph + svi + lcp + gleason + pgg45), test = "F")
drop1(lm(lpsa ~ lcavol + lweight + age + lbph + svi + lcp + pgg45), test = "F")
drop1(lm(lpsa ~ lcavol + lweight + age + lbph + svi + pgg45), test = "F")
drop1(lm(lpsa ~ lcavol + lweight + age + lbph + svi), test = "F")
drop1(lm(lpsa ~ lcavol + lweight + lbph + svi), test = "F")
drop1(lm(lpsa ~ lcavol + lweight + svi), test = "F")
##forward selection:
##end up with same model
##add_interactions
backward_selection_model<- lm(lpsa ~ lcavol + lweight + svi)
interaction1_model<- lm(lpsa ~ lcavol + lweight + svi + lcavol:svi + lweight:svi)
interaction2_model<- lm(lpsa ~ lcavol + lweight + svi + lcavol:svi)
interaction3_model<- lm(lpsa ~ lcavol + lweight + svi + lweight:svi)
##perform model selection on models built
##CV
AIC(full_model)
AIC(backward_selection_model)
AIC(interaction1_model)
AIC(interaction2_model)
AIC(interaction3_model)
BIC(full_model)
BIC(backward_selection_model)
BIC(interaction1_model)
BIC(interaction2_model)
BIC(interaction3_model)
summary(full_model)$adj.r.squared
summary(backward_selection_model)$adj.r.squared
summary(interaction1_model)$adj.r.squared
summary(interaction2_model)$adj.r.squared
summary(interaction3_model)$adj.r.squared
##cross validation
##select backward_selection_model
##diagnostics on final model
##do plot residuals against each covariates
par(mfrow = c(2, 2), mar = c(5, 5, 1.5, 0.5))
bl <- scales::alpha("black", 0.5) #semi-transparent black
n <- nrow(prostate)
#Student Q-Q plot
qqPlot(backward_selection_model, simulate = 1999, envelope = TRUE,
ylab = "Externally studentized residuals",
xlab = "Theoretical student quantiles",
pch = 20, col = bl)
#Residuals vs fitted values
residualPlot(backward_selection_model, type = "rstudent", quadratic = FALSE,
pch = 20, ylab = "Externally studentized residuals")
#Cook distance hat values
plot(cooks.distance(backward_selection_model), col = bl, pch = 20, ylab = "Cook's distances")
abline(h = 8/(n-2*length(coef(backward_selection_model))), col = 2)
influencePlot(backward_selection_model)
##colinearity
vif(backward_selection_model)
M <- model.matrix(backward_selection_model)
kappa(M, exact = TRUE, norm='2')
K <- model.matrix(interaction1_model)
k
str(K)
remove(K)
K <- 10
#Manually perform cross fold validation
KfoldCV <- function(fitted.mod, K, ...){
data <- model.matrix(fitted.mod) #design matrix
y <- fitted.mod$model[,1] #response
n <- nrow(data)
#Shuffle the indices
inds <- sample.int(n = n, size = n, replace = FALSE)
#Split into K groups of ~ equal size (from https://stackoverflow.com/a/16275428)
form_group <- function(x, n){ split(x, cut(seq_along(x), n, labels = FALSE)) }
groups <- form_group(inds, K)
#Obtain prediction from K-folds
preds <- rep(NA, n)
for(j in 1:K){
preds[groups[[j]]] <- data[groups[[j]],] %*% lm(y[-groups[[j]]] ~ -1 + data[-groups[[j]],])$coef
}
#Compute prediction error
crossprod(preds - y)[1,1]
}
round(c("full model" = median(replicate(KfoldCV(fitted.mod = full_model, K = K), n = 100)),
"backward selection model " = median(replicate(KfoldCV(fitted.mod = backward_selection_model, K = K), n = 100)),
"interaction1 model" = median(replicate(KfoldCV(fitted.mod = interaction1_model, K = K), n = 100)),
"interaction2 model" = median(replicate(KfoldCV(fitted.mod = interaction2_model, K = K), n = 100)),
"interaction3 model" = median(replicate(KfoldCV(fitted.mod = interaction3_model, K = K), n = 100))),
digits = 2)
install.package("leaps")
install.packages("leaps")
library(leaps)
leaps=regsubsets(lpsa ~ lcavol + lweight + age + lbph + svi + lcp + gleason + pgg45,data=prostate, nbest=10)
plot(leaps, scale="bic")
plot(leaps, scale="bic")
plot(leaps, scale="bic")
leaps=regsubsets(lpsa ~ lcavol + lweight + age + lbph + svi + lcp + gleason + pgg45,data=prostate, nbest=10)
?regsubsets
leaps=regsubsets(lpsa ~ lcavol + lweight + age + lbph + svi + lcp + gleason + pgg45,data=prostate, nbest=1)
plot(leaps, scale="bic")
plot(leaps, scale="aic")
?regsubsets
plot(leaps, scale="cp")
plot(leaps, scale="bic")
summary(leaps)
BIC(backward_selection_model)
BIC(full_model)
##install packages ggplot2,car,GGally, knitr
##stargazer for table
library(ggplot2)
library(car)
library(knitr)
library(GGally)
library(leaps)
prostate <- read.table("http://sma.epfl.ch/~lbelzile/math341/prostate.dat", header = TRUE)
##Exploratory data analysis
str(prostate)
apply(prostate, 2, range)
print(GGally::ggpairs(prostate[,-c(5,7)]), progress = FALSE)
##drop only one with gleason 8
##lpsa has linear relationship with lcavol, (less)lweight, lcp, rests seems uncorrelated
##collinearity between lcavol-lcp
##no need for transformations
##default value observed before taking log need to clean
prostate <- prostate[c(-37),]
attach(prostate)
gleason <- factor(gleason, ordered=FALSE)
svi <- factor(svi, ordered=FALSE)
##Fit full model
full_model <- lm(lpsa ~ lcavol + lweight + age + lbph + svi + lcp + gleason + pgg45)
##do diagnostics
studentized<-rstudent(full_model)
par(mfrow = c(3, 3))
plot(x=lcavol, y=studentized,xlab="Log cancer volumne",ylab="Standardized residuals",cex.lab=1.4)
plot(x=lweight, y=studentized,xlab="Log prostate weight",ylab="Standardized residuals",cex.lab=1.4)
plot(x=age, y=studentized,xlab="Age of patient",ylab="Standardized residuals",cex.lab=1.4)
plot(x=lbph, y=studentized,xlab="Log benign prostatic hyperplasia",ylab="Standardized residuals",cex.lab=1.4)
plot(x=svi, y=studentized,xlab="Seminal vesicle invasion",ylab="Standardized residuals",cex.lab=1.4)
plot(x=lcp, y=studentized,xlab="Log capsular penetration",ylab="Standardized residuals",cex.lab=1.4)
plot(x=gleason, y=studentized,xlab="Gleason score",ylab="Standardized residuals",cex.lab=1.4)
plot(x=pgg45, y=studentized,xlab="Pct of Gleason score 4 or 5",ylab="Standardized residuals",cex.lab=1.4)
par(mfrow = c(2, 2), mar = c(5, 5, 1.5, 0.5))
bl <- scales::alpha("black", 0.5) #semi-transparent black
n <- nrow(prostate)
#Student Q-Q plot
qqPlot(full_model, simulate = 1999, envelope = TRUE,
ylab = "Standardized residuals",
xlab = "Theoretical student quantiles",
pch = 20, col = bl, main="(a) QQPlot")
#Residuals vs fitted values
residualPlot(full_model, type = "rstudent", quadratic = FALSE,
pch = 20, ylab = "Standardized residuals", main="(b) Standardized residuals vs fitted values")
#Cook distance hat values
plot(cooks.distance(full_model), col = bl, pch = 20, ylab = "Cook's distances", main="(c) Cook's distance")
abline(h = 8/(n-2*length(coef(full_model))), col = 2)
influencePlot(full_model, ylab = "Standardized residuals", main="(d) Hat-Values")
prostate[c(-38),]
prostate[38,]
apply(prostate, 2, range)
prostate[40,]
lcp
vif(full_model)
M <- model.matrix(full_model)
kappa(M, exact = TRUE, norm='2')
drop1(lm(lpsa ~ lcavol + lweight + age + lbph + svi + lcp + gleason + pgg45), test = "F")
drop1(lm(lpsa ~ lcavol + lweight + age + lbph + svi + lcp), test = "F")
drop1(lm(lpsa ~ lcavol + lweight + lbph + svi), test = "F")
drop1(lm(lpsa ~ lcavol + lweight + svi), test = "F")
backward_selection_model<- lm(lpsa ~ lcavol + lweight + svi)
##fit all possible models
leaps=regsubsets(lpsa ~ lcavol + lweight + age + lbph + svi + lcp + gleason + pgg45,data=prostate, nbest=8)
par(mfrow=c(1,1))
plot(leaps, scale = "bic", main = "BIC")
expert_model <- lm(lpsa ~ lcavol + lweight + svi + age + lweight:svi)
interaction1_model<- lm(lpsa ~ lcavol + lweight + svi + lcavol:lweight)
interaction2_model<- lm(lpsa ~ lcavol + lweight + svi + lcavol:svi)
AIC(full_model)
AIC(backward_selection_model)
AIC(interaction1_model)
AIC(interaction2_model)
AIC(expert_model)
BIC(full_model)
BIC(backward_selection_model)
BIC(interaction1_model)
BIC(interaction2_model)
BIC(expert_model)
expert_model <- lm(lpsa ~ lcavol + lweight + svi + age)
AIC(full_model)
AIC(backward_selection_model)
AIC(interaction1_model)
AIC(interaction2_model)
AIC(expert_model)
BIC(full_model)
BIC(backward_selection_model)
BIC(interaction1_model)
BIC(interaction2_model)
BIC(expert_model)
AIC(full_model)
AIC(backward_selection_model)
AIC(interaction1_model)
AIC(interaction2_model)
BIC(full_model)
BIC(backward_selection_model)
BIC(interaction1_model)
BIC(interaction2_model)
summary(full_model)$adj.r.squared
summary(backward_selection_model)$adj.r.squared
summary(interaction1_model)$adj.r.squared
summary(interaction2_model)$adj.r.squared
summary_final <- summary(backward_selection_model)
knitr::kable(coef(summary_final), digits = 3)
vif(backward_selection_model)
dank_model <- lm(lpsa ~ lcavol + lweight + svi - 1)
interaction1_model<- lm(lpsa ~ lcavol + lweight + svi + lcavol:lweight)
interaction2_model<- lm(lpsa ~ lcavol + lweight + svi + lcavol:svi)
AIC(full_model)
AIC(backward_selection_model)
AIC(interaction1_model)
AIC(interaction2_model)
AIC(dank_model)
BIC(full_model)
BIC(backward_selection_model)
BIC(interaction1_model)
BIC(interaction2_model)
BIC(dank_model)
summary_final <- summary(dank_model)
knitr::kable(coef(summary_final), digits = 3)
dank_model <- lm(lpsa ~ lcavol + lweight - 1)
AIC(full_model)
AIC(backward_selection_model)
AIC(interaction1_model)
AIC(interaction2_model)
AIC(dank_model)
BIC(full_model)
BIC(backward_selection_model)
BIC(interaction1_model)
BIC(interaction2_model)
BIC(dank_model)
summary(full_model)$adj.r.squared
summary(backward_selection_model)$adj.r.squared
summary(interaction1_model)$adj.r.squared
summary(interaction2_model)$adj.r.squared
summary(full_model)$adj.r.squared
summary(backward_selection_model)$adj.r.squared
summary(interaction1_model)$adj.r.squared
summary(interaction2_model)$adj.r.squared
summary(dank_model)$adj.r.squared
vif(full_model)
vif(backward_selection_model)
vif(interaction1_model)
vif(dank_model)
final_model <- backward_selection_model
summary_final <- summary(final_model)
knitr::kable(coef(summary_final), digits = 3)
vif(final_model)
dank_model <- lm(lpsa ~ lcavol + lweight)
dank_model <- lm(lpsa ~ lcavol + lweight)
AIC(full_model)
AIC(backward_selection_model)
AIC(interaction1_model)
AIC(interaction2_model)
AIC(dank_model)
BIC(full_model)
BIC(backward_selection_model)
BIC(interaction1_model)
BIC(interaction2_model)
BIC(dank_model)
summary(full_model)$adj.r.squared
summary(backward_selection_model)$adj.r.squared
summary(interaction1_model)$adj.r.squared
summary(interaction2_model)$adj.r.squared
summary(dank_model)$adj.r.squared
dank_model <- lm(lpsa ~ lcavol + lweight + svi:lweight)
AIC(dank_model)
BIC(dank_model)
summary(dank_model)$adj.r.squared
interaction1_model<- lm(lpsa ~ lcavol + lweight + svi + lcavol:lweight)
interaction2_model<- lm(lpsa ~ lcavol + lweight + svi + lcavol:svi)
dank_model <- lm(lpsa ~ lcavol + lweight + svi:lweight - 1)
AIC(full_model)
AIC(backward_selection_model)
AIC(interaction1_model)
AIC(interaction2_model)
AIC(dank_model)
BIC(full_model)
BIC(backward_selection_model)
BIC(interaction1_model)
BIC(interaction2_model)
BIC(dank_model)
summary(full_model)$adj.r.squared
summary(backward_selection_model)$adj.r.squared
summary(interaction1_model)$adj.r.squared
summary(interaction2_model)$adj.r.squared
summary(dank_model)$adj.r.squared
vif(full_model)
vif(backward_selection_model)
vif(interaction1_model)
vif(dank_model)
vif(full_model)
vif(backward_selection_model)
vif(interaction1_model)
vif(dank_model)
dank_model <- lm(lpsa ~ lcavol + lweight + svi:lcavol - 1)
##perform model selection on models built
AIC(full_model)
AIC(backward_selection_model)
AIC(interaction1_model)
AIC(interaction2_model)
AIC(dank_model)
BIC(full_model)
BIC(backward_selection_model)
BIC(interaction1_model)
BIC(interaction2_model)
BIC(dank_model)
final_model <- backward_selection_model
summary_final <- summary(final_model)
knitr::kable(coef(summary_final), digits = 3)
vif(final_model)
str(prostate)
lpsa
gleason
summary_final
##install packages ggplot2,car,GGally, knitr
library(ggplot2)
library(car)
library(knitr)
library(GGally)
library(leaps)
prostate <- read.table("http://sma.epfl.ch/~lbelzile/math341/prostate.dat", header = TRUE)
##Exploratory data analysis
str(prostate)
apply(prostate, 2, range)
print(GGally::ggpairs(prostate[,-c(5,7)]), progress = FALSE)
prostate <- prostate[c(-37),]
attach(prostate)
gleason <- factor(gleason, ordered=FALSE)
svi <- factor(svi, ordered=FALSE)
##Fit full model
full_model <- lm(lpsa ~ lcavol + lweight + age + lbph + svi + lcp + gleason + pgg45)
##Diagnostics
studentized<-rstudent(full_model)
par(mfrow = c(3, 3))
plot(x=lcavol, y=studentized,xlab="Log cancer volumne",ylab="Standardized residuals",cex.lab=1.4)
plot(x=lweight, y=studentized,xlab="Log prostate weight",ylab="Standardized residuals",cex.lab=1.4)
plot(x=age, y=studentized,xlab="Age of patient",ylab="Standardized residuals",cex.lab=1.4)
plot(x=lbph, y=studentized,xlab="Log benign prostatic hyperplasia",ylab="Standardized residuals",cex.lab=1.4)
plot(x=svi, y=studentized,xlab="Seminal vesicle invasion",ylab="Standardized residuals",cex.lab=1.4)
plot(x=lcp, y=studentized,xlab="Log capsular penetration",ylab="Standardized residuals",cex.lab=1.4)
plot(x=gleason, y=studentized,xlab="Gleason score",ylab="Standardized residuals",cex.lab=1.4)
plot(x=pgg45, y=studentized,xlab="Pct of Gleason score 4 or 5",ylab="Standardized residuals",cex.lab=1.4)
par(mfrow = c(2, 2), mar = c(5, 5, 1.5, 0.5))
bl <- scales::alpha("black", 0.5) #semi-transparent black
n <- nrow(prostate)
#Student Q-Q plot
qqPlot(full_model, simulate = 1999, envelope = TRUE,
ylab = "Standardized residuals",
xlab = "Theoretical student quantiles",
pch = 20, col = bl, main="(a) QQPlot")
#Residuals vs fitted values
residualPlot(full_model, type = "rstudent", quadratic = FALSE,
pch = 20, ylab = "Standardized residuals", main="(b) Standardized residuals vs fitted values")
#Cook distance hat values
plot(cooks.distance(full_model), col = bl, pch = 20, ylab = "Cook's distances", main="(c) Cook's distance")
abline(h = 8/(n-2*length(coef(full_model))), col = 2)
influencePlot(full_model, ylab = "Standardized residuals", main="(d) Hat-Values")
